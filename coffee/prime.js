// Generated by CoffeeScript 1.7.1
(function() {
  var checkPrime, convToStr, getPrimes, i, numbers, strings;

  getPrimes = function(max) {
    var isPrime, last, num, numbers;
    last = 2;
    numbers = [last];
    num = last;
    while (num <= max) {
      isPrime = checkPrime(last++);
      if (isPrime) {
        numbers.push(isPrime);
        num++;
      }
    }
    return numbers;
  };

  checkPrime = function(n) {
    var i, _i, _ref;
    for (i = _i = 2, _ref = Math.ceil(Math.sqrt(n)); 2 <= _ref ? _i <= _ref : _i >= _ref; i = 2 <= _ref ? ++_i : --_i) {
      if (n % i === 0) {
        return false;
      }
    }
    return n;
  };

  convToStr = function(number) {
    var calc, decades, divider, i, lastOne, lastTwo, multiples, result, string, underTwenty;
    underTwenty = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];
    decades = ['twenty', 'thirty', 'fourty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];
    multiples = ['hundred', 'thousand'];
    result = [];
    string = '';
    lastTwo = number % 100;
    lastOne = number % 10;
    if (lastTwo > 0 && lastTwo < 20) {
      result.unshift(underTwenty[lastTwo - 1]);
      result.unshift('and');
    } else if (lastTwo >= 20) {
      if (lastOne > 0) {
        result.unshift(underTwenty[lastOne - 1]);
      }
      result.unshift(decades[(Math.floor(lastTwo / 10)) - 2]);
      result.unshift('and');
    }
    i = 0;
    divider = 100;
    calc = Math.floor(number / divider);
    while (calc > 0) {
      lastOne = calc % 10;
      if (lastOne > 0) {
        if (multiples[i] !== void 0) {
          result.unshift(multiples[i]);
        } else {
          console.log('number longer than 4 digits');
          return;
        }
        result.unshift(underTwenty[lastOne - 1]);
      }
      divider *= 10;
      i++;
      calc = Math.floor(number / divider);
    }
    if (result[0] === 'and') {
      result.shift();
    }
    string = result.join(' ');
    return string;
  };

  numbers = getPrimes(1000);

  strings = [];

  i = 0;

  while (i < numbers.length && convToStr(numbers[i])) {
    strings.push(convToStr(numbers[i]));
    i++;
  }

  console.dir(strings);

}).call(this);
